name: Create GitHub Release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*.post*"
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: true
        default: 'Manual release'

permissions:
  contents: write

jobs:
  details:
    name: Extract Tag Info
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.extract.outputs.tag }}
    steps:
      - name: Extract tag name
        id: extract
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  build:
    name: Build Package
    needs: [details]
    runs-on: ubuntu-latest
    steps:
      - name: Show trigger reason
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Trigger reason: ${{ github.event.inputs.reason }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Validate tag format
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Validating tag: $TAG_NAME"
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\.post[0-9]+)?$ ]]; then
            echo "Invalid tag format: $TAG_NAME"
            exit 1
          fi

      - name: Check version matches tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          FILE_VERSION=$(grep '^version =' pyproject.toml | cut -d'"' -f2)
          if [[ "$TAG_NAME" != "v$FILE_VERSION" ]]; then
            echo "Tag $TAG_NAME does not match pyproject.toml version $FILE_VERSION"
            exit 1
          fi
          echo "Tag and version match."

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          python -m pip install twine
          twine check dist/*

      - name: Upload dist/ as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  github_release:
    name: Create GitHub Release
    needs: [details, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* \
            --title ${{ needs.details.outputs.tag_name }} \
            --generate-notes
